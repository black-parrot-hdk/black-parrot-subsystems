From 2f308e906de803ebe60e70a880a625a040ba7072 Mon Sep 17 00:00:00 2001
From: Dan Petrisko <petrisko@cs.washington.edu>
Date: Wed, 9 Oct 2024 22:56:52 -0700
Subject: [PATCH 2/6] Updates to TL register

---
 util/reggen/reg_top.sv.tpl | 115 ++++++++++++++++++++++++---------------------
 1 file changed, 62 insertions(+), 53 deletions(-)

diff --git a/util/reggen/reg_top.sv.tpl b/util/reggen/reg_top.sv.tpl
index 06b281e..910c9b2 100644
--- a/util/reggen/reg_top.sv.tpl
+++ b/util/reggen/reg_top.sv.tpl
@@ -125,8 +125,16 @@ module ${mod_name} (
   input ${clock.clock},
   input ${clock.reset},
 % endfor
-  input  tlul_pkg::tl_h2d_t tl_i,
-  output tlul_pkg::tl_d2h_t tl_o,
+//  input  tlul_pkg::tl_h2d_t tl_i,
+//  output tlul_pkg::tl_d2h_t tl_o,
+  input reg_we,
+  input reg_re,
+  input [top_pkg::TL_AW-1:0] reg_addr,
+  input [top_pkg::TL_DW-1:0] reg_wdata,
+  input [top_pkg::TL_DBW-1:0] reg_be,
+  output logic [top_pkg::TL_DW-1:0] reg_rdata,
+  output logic reg_error,
+
 % if num_wins != 0:
 
   // Output port for window
@@ -161,21 +169,21 @@ module ${mod_name} (
   localparam int DBW = DW/8;                    // Byte Width
 
   // register signals
-  logic           reg_we;
-  logic           reg_re;
-  logic [AW-1:0]  reg_addr;
-  logic [DW-1:0]  reg_wdata;
-  logic [DBW-1:0] reg_be;
-  logic [DW-1:0]  reg_rdata;
-  logic           reg_error;
+//  logic           reg_we;
+//  logic           reg_re;
+//  logic [AW-1:0]  reg_addr;
+//  logic [DW-1:0]  reg_wdata;
+//  logic [DBW-1:0] reg_be;
+//  logic [DW-1:0]  reg_rdata;
+//  logic           reg_error;
 
   logic          addrmiss, wr_err;
 
   logic [DW-1:0] reg_rdata_next;
   logic reg_busy;
 
-  tlul_pkg::tl_h2d_t tl_reg_h2d;
-  tlul_pkg::tl_d2h_t tl_reg_d2h;
+  //tlul_pkg::tl_h2d_t tl_reg_h2d;
+  //tlul_pkg::tl_d2h_t tl_reg_d2h;
 % endif
 
 ## The clock and reset inputs aren't used if this device interface has no
@@ -217,10 +225,11 @@ module ${mod_name} (
 % if rb.all_regs:
   // incoming payload check
   logic intg_err;
-  tlul_cmd_intg_chk u_chk (
-    .tl_i(${tl_h2d_expr}),
-    .err_o(intg_err)
-  );
+  //tlul_cmd_intg_chk u_chk (
+  //  .tl_i(${tl_h2d_expr}),
+  //  .err_o(intg_err)
+  //);
+  assign intg_err = '0;
 
   // also check for spurious write enables
   logic reg_we_err;
@@ -268,22 +277,22 @@ module ${mod_name} (
   assign intg_err_o = 1'b0;
 % endif
 
-  // outgoing integrity generation
-  tlul_pkg::tl_d2h_t tl_o_pre;
-  tlul_rsp_intg_gen #(
-    .EnableRspIntgGen(1),
-    .EnableDataIntgGen(${common_data_intg_gen})
-  ) u_rsp_intg_gen (
-    .tl_i(tl_o_pre),
-    .tl_o(${tl_d2h_expr})
-  );
+//  // outgoing integrity generation
+//  tlul_pkg::tl_d2h_t tl_o_pre;
+//  tlul_rsp_intg_gen #(
+//    .EnableRspIntgGen(1),
+//    .EnableDataIntgGen(${common_data_intg_gen})
+//  ) u_rsp_intg_gen (
+//    .tl_i(tl_o_pre),
+//    .tl_o(${tl_d2h_expr})
+//  );
 
 % if num_dsp <= 1:
   ## Either no windows (and just registers) or no registers and only
   ## one window.
   % if num_wins == 0:
-  assign tl_reg_h2d = ${tl_h2d_expr};
-  assign tl_o_pre   = tl_reg_d2h;
+//  assign tl_reg_h2d = ${tl_h2d_expr};
+//  assign tl_o_pre   = tl_reg_d2h;
   % else:
   assign tl_win_o = ${tl_h2d_expr};
   assign tl_o_pre = tl_win_i;
@@ -366,29 +375,29 @@ module ${mod_name} (
 % endif
 % if rb.all_regs:
 
-  tlul_adapter_reg #(
-    .RegAw(AW),
-    .RegDw(DW),
-    .EnableDataIntgGen(${adapt_data_intg_gen})
-  ) u_reg_if (
-    .clk_i  (${reg_clk_expr}),
-    .rst_ni (${reg_rst_expr}),
-
-    .tl_i (tl_reg_h2d),
-    .tl_o (tl_reg_d2h),
-
-    .en_ifetch_i(prim_mubi_pkg::MuBi4False),
-    .intg_error_o(),
-
-    .we_o    (reg_we),
-    .re_o    (reg_re),
-    .addr_o  (reg_addr),
-    .wdata_o (reg_wdata),
-    .be_o    (reg_be),
-    .busy_i  (reg_busy),
-    .rdata_i (reg_rdata),
-    .error_i (reg_error)
-  );
+//  tlul_adapter_reg #(
+//    .RegAw(AW),
+//    .RegDw(DW),
+//    .EnableDataIntgGen(${adapt_data_intg_gen})
+//  ) u_reg_if (
+//    .clk_i  (${reg_clk_expr}),
+//    .rst_ni (${reg_rst_expr}),
+//
+//    .tl_i (tl_reg_h2d),
+//    .tl_o (tl_reg_d2h),
+//
+//    .en_ifetch_i(prim_mubi_pkg::MuBi4False),
+//    .intg_error_o(),
+//
+//    .we_o    (reg_we),
+//    .re_o    (reg_re),
+//    .addr_o  (reg_addr),
+//    .wdata_o (reg_wdata),
+//    .be_o    (reg_be),
+//    .busy_i  (reg_busy),
+//    .rdata_i (reg_rdata),
+//    .error_i (reg_error)
+//  );
 
   // cdc oversampling signals
 
@@ -836,12 +845,12 @@ ${rdata_gen(f, r.name.lower() + "_" + f.name.lower())}\
 % if rb.all_regs:
 
   // Assertions for Register Interface
-  `ASSERT_PULSE(wePulse, reg_we, ${reg_clk_expr}, !${reg_rst_expr})
-  `ASSERT_PULSE(rePulse, reg_re, ${reg_clk_expr}, !${reg_rst_expr})
+  //`ASSERT_PULSE(wePulse, reg_we, ${reg_clk_expr}, !${reg_rst_expr})
+  //`ASSERT_PULSE(rePulse, reg_re, ${reg_clk_expr}, !${reg_rst_expr})
 
-  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, ${reg_clk_expr}, !${reg_rst_expr})
+  //`ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, ${reg_clk_expr}, !${reg_rst_expr})
 
-  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), ${reg_clk_expr}, !${reg_rst_expr})
+  //`ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), ${reg_clk_expr}, !${reg_rst_expr})
 
   // this is formulated as an assumption such that the FPV testbenches do disprove this
   // property by mistake
-- 
2.16.5

