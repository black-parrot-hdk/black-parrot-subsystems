From 1203fc37da04b16644eefdbcd2d79efbbfd5d1b4 Mon Sep 17 00:00:00 2001
From: Dan Petrisko <petrisko@cs.washington.edu>
Date: Fri, 11 Oct 2024 23:54:57 -0700
Subject: [PATCH 5/6] Replacing sync primitive

---
 hw/ip_templates/rv_plic/rtl/rv_plic.sv.tpl | 39 ++++++++++++++++++------------
 1 file changed, 23 insertions(+), 16 deletions(-)

diff --git a/hw/ip_templates/rv_plic/rtl/rv_plic.sv.tpl b/hw/ip_templates/rv_plic/rtl/rv_plic.sv.tpl
index 788c8bf..cdfb8d9 100644
--- a/hw/ip_templates/rv_plic/rtl/rv_plic.sv.tpl
+++ b/hw/ip_templates/rv_plic/rtl/rv_plic.sv.tpl
@@ -159,14 +159,21 @@ module ${module_instance_name} import ${module_instance_name}_reg_pkg::*; #(
 
   // Synchronize all incoming interrupt requests.
   logic [NumSrc-1:0] intr_src_synced;
-  prim_flop_2sync #(
-    .Width(NumSrc)
-  ) u_prim_flop_2sync (
-    .clk_i,
-    .rst_ni,
-    .d_i(intr_src_i),
-    .q_o(intr_src_synced)
-  );
+  //prim_flop_2sync #(
+  //  .Width(NumSrc)
+  //) u_prim_flop_2sync (
+  //  .clk_i,
+  //  .rst_ni,
+  //  .d_i(intr_src_i),
+  //  .q_o(intr_src_synced)
+  //);
+  bsg_sync_sync
+   #(.width_p(NumSrc))
+   bss
+    (.oclk_i(clk_i)
+     ,.iclk_data_i(intr_src_i)
+     ,.oclk_data_o(intr_src_synced)
+     );
 
   ${module_instance_name}_gateway #(
     .N_SOURCE   (NumSrc)
@@ -270,7 +277,7 @@ module ${module_instance_name} import ${module_instance_name}_reg_pkg::*; #(
 //  end
 
   // Assume
-  `ASSUME(Irq0Tied_A, intr_src_i[0] == 1'b0)
+//  `ASSUME(Irq0Tied_A, intr_src_i[0] == 1'b0)
 
   // This assertion should be provable in FPV because we don't have a block-level DV environment. It
   // is trying to say that any integrity error detected inside the register block (u_reg) will cause
@@ -290,13 +297,13 @@ module ${module_instance_name} import ${module_instance_name}_reg_pkg::*; #(
   //    form "If no integrity error is detected for _SEC_CM_ALERT_MAX_CYC cycles, the alert_p signal
   //    must go high". To encode this cleanly in SVA, we actually say "We can't have neither an
   //    integrity error nor an alert signal for too many cycles".
-  `ASSERT(FpvSecCmBusIntegrity_A,
-          ($rose(u_reg.intg_err) &&
-           gen_alert_tx[0].u_prim_alert_sender.state_q == gen_alert_tx[0].u_prim_alert_sender.Idle)
-          |->
-          not ((!gen_alert_tx[0].u_prim_alert_sender.sigint_detected && !alert_tx_o[0].alert_p)
-               [*`_SEC_CM_ALERT_MAX_CYC]))
+//  `ASSERT(FpvSecCmBusIntegrity_A,
+//          ($rose(u_reg.intg_err) &&
+//           gen_alert_tx[0].u_prim_alert_sender.state_q == gen_alert_tx[0].u_prim_alert_sender.Idle)
+//          |->
+//          not ((!gen_alert_tx[0].u_prim_alert_sender.sigint_detected && !alert_tx_o[0].alert_p)
+//               [*`_SEC_CM_ALERT_MAX_CYC]))
 
   // Alert assertions for reg_we onehot check
-  `ASSERT_PRIM_REG_WE_ONEHOT_ERROR_TRIGGER_ALERT(RegWeOnehotCheck_A, u_reg, alert_tx_o[0])
+//  `ASSERT_PRIM_REG_WE_ONEHOT_ERROR_TRIGGER_ALERT(RegWeOnehotCheck_A, u_reg, alert_tx_o[0])
 endmodule
-- 
2.16.5

