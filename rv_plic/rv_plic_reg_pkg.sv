// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package rv_plic_reg_pkg;

  // Param list
  parameter int NumSrc = 2;
  parameter int NumTarget = 1;
  parameter int PrioWidth = 1;
  parameter int NumAlerts = 1;

  // Address widths within the block
  parameter int BlockAw = 27;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    logic        q;
  } rv_plic_reg2hw_prio0_reg_t;

  typedef struct packed {
    logic        q;
  } rv_plic_reg2hw_prio1_reg_t;

  typedef struct packed {
    logic        q;
  } rv_plic_reg2hw_ie0_mreg_t;

  typedef struct packed {
    logic        q;
  } rv_plic_reg2hw_threshold0_reg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
    logic        re;
  } rv_plic_reg2hw_cc0_reg_t;

  typedef struct packed {
    logic        q;
  } rv_plic_reg2hw_msip0_reg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } rv_plic_reg2hw_alert_test_reg_t;

  typedef struct packed {
    logic        d;
    logic        de;
  } rv_plic_hw2reg_ip_mreg_t;

  typedef struct packed {
    logic        d;
  } rv_plic_hw2reg_cc0_reg_t;

  // Register -> HW type
  typedef struct packed {
    rv_plic_reg2hw_prio0_reg_t prio0; // [10:10]
    rv_plic_reg2hw_prio1_reg_t prio1; // [9:9]
    rv_plic_reg2hw_ie0_mreg_t [1:0] ie0; // [8:7]
    rv_plic_reg2hw_threshold0_reg_t threshold0; // [6:6]
    rv_plic_reg2hw_cc0_reg_t cc0; // [5:3]
    rv_plic_reg2hw_msip0_reg_t msip0; // [2:2]
    rv_plic_reg2hw_alert_test_reg_t alert_test; // [1:0]
  } rv_plic_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    rv_plic_hw2reg_ip_mreg_t [1:0] ip; // [4:1]
    rv_plic_hw2reg_cc0_reg_t cc0; // [0:0]
  } rv_plic_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO0_OFFSET = 27'h 0;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO1_OFFSET = 27'h 4;
  parameter logic [BlockAw-1:0] RV_PLIC_IP_OFFSET = 27'h 1000;
  parameter logic [BlockAw-1:0] RV_PLIC_IE0_OFFSET = 27'h 2000;
  parameter logic [BlockAw-1:0] RV_PLIC_THRESHOLD0_OFFSET = 27'h 200000;
  parameter logic [BlockAw-1:0] RV_PLIC_CC0_OFFSET = 27'h 200004;
  parameter logic [BlockAw-1:0] RV_PLIC_MSIP0_OFFSET = 27'h 4000000;
  parameter logic [BlockAw-1:0] RV_PLIC_ALERT_TEST_OFFSET = 27'h 4004000;

  // Reset values for hwext registers and their fields
  parameter logic [0:0] RV_PLIC_CC0_RESVAL = 1'h 0;
  parameter logic [0:0] RV_PLIC_ALERT_TEST_RESVAL = 1'h 0;

  // Register index
  typedef enum int {
    RV_PLIC_PRIO0,
    RV_PLIC_PRIO1,
    RV_PLIC_IP,
    RV_PLIC_IE0,
    RV_PLIC_THRESHOLD0,
    RV_PLIC_CC0,
    RV_PLIC_MSIP0,
    RV_PLIC_ALERT_TEST
  } rv_plic_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] RV_PLIC_PERMIT [8] = '{
    4'b 0001, // index[0] RV_PLIC_PRIO0
    4'b 0001, // index[1] RV_PLIC_PRIO1
    4'b 0001, // index[2] RV_PLIC_IP
    4'b 0001, // index[3] RV_PLIC_IE0
    4'b 0001, // index[4] RV_PLIC_THRESHOLD0
    4'b 0001, // index[5] RV_PLIC_CC0
    4'b 0001, // index[6] RV_PLIC_MSIP0
    4'b 0001  // index[7] RV_PLIC_ALERT_TEST
  };

endpackage

