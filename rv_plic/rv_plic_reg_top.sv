// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module rv_plic_reg_top (
  input clk_i,
  input rst_ni,
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output rv_plic_reg_pkg::rv_plic_reg2hw_t reg2hw, // Write
  input  rv_plic_reg_pkg::rv_plic_hw2reg_t hw2reg, // Read

  // Integrity check errors
  output logic intg_err_o,

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import rv_plic_reg_pkg::* ;

  localparam int AW = 27;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;
  logic reg_busy;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;


  // incoming payload check
  logic intg_err;
  tlul_cmd_intg_chk u_chk (
    .tl_i(tl_i),
    .err_o(intg_err)
  );

  logic intg_err_q;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      intg_err_q <= '0;
    end else if (intg_err) begin
      intg_err_q <= 1'b1;
    end
  end

  // integrity error output is permanent and should be used for alert generation
  // register errors are transactional
  assign intg_err_o = intg_err_q | intg_err;

  // outgoing integrity generation
  tlul_pkg::tl_d2h_t tl_o_pre;
  tlul_rsp_intg_gen #(
    .EnableRspIntgGen(1),
    .EnableDataIntgGen(1)
  ) u_rsp_intg_gen (
    .tl_i(tl_o_pre),
    .tl_o(tl_o)
  );

  assign tl_reg_h2d = tl_i;
  assign tl_o_pre   = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW),
    .EnableDataIntgGen(0)
  ) u_reg_if (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .busy_i  (reg_busy),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  // cdc oversampling signals

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err | intg_err;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic prio0_we;
  logic prio0_qs;
  logic prio0_wd;
  logic prio1_we;
  logic prio1_qs;
  logic prio1_wd;
  logic ip_p_0_qs;
  logic ip_p_1_qs;
  logic ie0_we;
  logic ie0_e_0_qs;
  logic ie0_e_0_wd;
  logic ie0_e_1_qs;
  logic ie0_e_1_wd;
  logic threshold0_we;
  logic threshold0_qs;
  logic threshold0_wd;
  logic cc0_re;
  logic cc0_we;
  logic cc0_qs;
  logic cc0_wd;
  logic msip0_we;
  logic msip0_qs;
  logic msip0_wd;
  logic alert_test_we;
  logic alert_test_wd;

  // Register instances
  // R[prio0]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_prio0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio0_we),
    .wd     (prio0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio0.q),

    // to register interface (read)
    .qs     (prio0_qs)
  );


  // R[prio1]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_prio1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio1_we),
    .wd     (prio1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio1.q),

    // to register interface (read)
    .qs     (prio1_qs)
  );


  // Subregister 0 of Multireg ip
  // R[ip]: V(False)
  //   F[p_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_ip_p_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[0].de),
    .d      (hw2reg.ip[0].d),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip_p_0_qs)
  );

  //   F[p_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_ip_p_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[1].de),
    .d      (hw2reg.ip[1].d),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip_p_1_qs)
  );


  // Subregister 0 of Multireg ie0
  // R[ie0]: V(False)
  //   F[e_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ie0_e_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_we),
    .wd     (ie0_e_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[0].q),

    // to register interface (read)
    .qs     (ie0_e_0_qs)
  );

  //   F[e_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_ie0_e_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_we),
    .wd     (ie0_e_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[1].q),

    // to register interface (read)
    .qs     (ie0_e_1_qs)
  );


  // R[threshold0]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_threshold0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (threshold0_we),
    .wd     (threshold0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.threshold0.q),

    // to register interface (read)
    .qs     (threshold0_qs)
  );


  // R[cc0]: V(True)
  prim_subreg_ext #(
    .DW    (1)
  ) u_cc0 (
    .re     (cc0_re),
    .we     (cc0_we),
    .wd     (cc0_wd),
    .d      (hw2reg.cc0.d),
    .qre    (reg2hw.cc0.re),
    .qe     (reg2hw.cc0.qe),
    .q      (reg2hw.cc0.q),
    .qs     (cc0_qs)
  );


  // R[msip0]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_msip0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (msip0_we),
    .wd     (msip0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.msip0.q),

    // to register interface (read)
    .qs     (msip0_qs)
  );


  // R[alert_test]: V(True)
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.alert_test.qe),
    .q      (reg2hw.alert_test.q),
    .qs     ()
  );



  logic [7:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == RV_PLIC_PRIO0_OFFSET);
    addr_hit[1] = (reg_addr == RV_PLIC_PRIO1_OFFSET);
    addr_hit[2] = (reg_addr == RV_PLIC_IP_OFFSET);
    addr_hit[3] = (reg_addr == RV_PLIC_IE0_OFFSET);
    addr_hit[4] = (reg_addr == RV_PLIC_THRESHOLD0_OFFSET);
    addr_hit[5] = (reg_addr == RV_PLIC_CC0_OFFSET);
    addr_hit[6] = (reg_addr == RV_PLIC_MSIP0_OFFSET);
    addr_hit[7] = (reg_addr == RV_PLIC_ALERT_TEST_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[0] & (|(RV_PLIC_PERMIT[0] & ~reg_be))) |
               (addr_hit[1] & (|(RV_PLIC_PERMIT[1] & ~reg_be))) |
               (addr_hit[2] & (|(RV_PLIC_PERMIT[2] & ~reg_be))) |
               (addr_hit[3] & (|(RV_PLIC_PERMIT[3] & ~reg_be))) |
               (addr_hit[4] & (|(RV_PLIC_PERMIT[4] & ~reg_be))) |
               (addr_hit[5] & (|(RV_PLIC_PERMIT[5] & ~reg_be))) |
               (addr_hit[6] & (|(RV_PLIC_PERMIT[6] & ~reg_be))) |
               (addr_hit[7] & (|(RV_PLIC_PERMIT[7] & ~reg_be)))));
  end
  assign prio0_we = addr_hit[0] & reg_we & !reg_error;

  assign prio0_wd = reg_wdata[0];
  assign prio1_we = addr_hit[1] & reg_we & !reg_error;

  assign prio1_wd = reg_wdata[0];
  assign ie0_we = addr_hit[3] & reg_we & !reg_error;

  assign ie0_e_0_wd = reg_wdata[0];

  assign ie0_e_1_wd = reg_wdata[1];
  assign threshold0_we = addr_hit[4] & reg_we & !reg_error;

  assign threshold0_wd = reg_wdata[0];
  assign cc0_re = addr_hit[5] & reg_re & !reg_error;
  assign cc0_we = addr_hit[5] & reg_we & !reg_error;

  assign cc0_wd = reg_wdata[0];
  assign msip0_we = addr_hit[6] & reg_we & !reg_error;

  assign msip0_wd = reg_wdata[0];
  assign alert_test_we = addr_hit[7] & reg_we & !reg_error;

  assign alert_test_wd = reg_wdata[0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = prio0_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = prio1_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = ip_p_0_qs;
        reg_rdata_next[1] = ip_p_1_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = ie0_e_0_qs;
        reg_rdata_next[1] = ie0_e_1_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = threshold0_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[0] = cc0_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[0] = msip0_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[0] = '0;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // shadow busy
  logic shadow_busy;
  assign shadow_busy = 1'b0;

  // register busy
  logic reg_busy_sel;
  assign reg_busy = reg_busy_sel | shadow_busy;
  always_comb begin
    reg_busy_sel = '0;
    unique case (1'b1)
      default: begin
        reg_busy_sel  = '0;
      end
    endcase
  end


  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)

endmodule
